# -*- coding: utf-8 -*-
"""Titanic Analysis- AG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LFMle0jU1XmHeVnyV-DzjEs3XgQENjeI
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=sns.load_dataset('titanic')

"""# 1. Data Overview and Cleaning"""

display(df.head(3))
display(df.shape)
display(df.info())
display(df.describe())
display(df.duplicated().sum())

df.isnull().sum() #Check Null values

"""Replacing numeric Null values on age column with its average per gender"""

df['age'].fillna(df.groupby('sex')['age'].transform('mean'), inplace=True)

df['age'].isnull().sum() #Checking the number of null values after transformation

"""Replacing numeric Null values on embarked column with the most frequent values"""

df['embarked']=df['embarked'].fillna(df['embarked'].mode()[0])
print(df['embarked'].isnull().sum()) #Checking the number of Null values after the transformation

"""We will replace Null values on deck column with the most frequent values per Class column (Usually I would drop such columns that contains over 50% Nulls from the total row, but we might assume that there is a high correlation between Class and deck, first class beign on superior deck, and third class, below the sea level etc.)"""

df['deck']=df['deck'].fillna(df.groupby('pclass')['deck'].transform(lambda x: x.mode()[0]))

df['deck'].value_counts()

"""Drop duplicated rows"""

df.drop_duplicates(inplace=True)

"""# 2. Descriptive Analysis

What is the average age, fare, and family size of passengers?
"""

df.head(2)

df['family_size']=df['sibsp'] + df['parch'] + 1 # '1' represents the passenger himself

df['family_size'].value_counts()

print(df['age'].mean().round(0)) #average age on the ship
print(df['fare'].mean().round(0))# average price paid per ticket
print(df['fare'].max()) #max price paid
print(df['fare'].min())# cheapest price paid

"""What percentage of passengers survived overall? (1 means did survive and 0, did not survive)"""

print(f'Total number of passangers is:',df.shape[0])
print(f'Distribution of survived vs not survived',df['survived'].value_counts())
percentage_of_survival= df['survived'].value_counts(normalize=True) * 100
display(percentage_of_survival.round(2))
display(f'What percentage of passengers survived?', percentage_of_survival[1].round(2))

sns.set_style("whitegrid")

plt.figure(figsize=(6, 5))
ax = sns.countplot(data=df,x='survived', stat='percent') # Calculate percentages of the total

# Add labels and title
ax.set_title('Survival Proportion (0=No, 1=Yes)')
ax.set_xlabel('Survived')
ax.set_ylabel('Percentage (%)')

"""What percentage of passengers were male vs female?"""

gender_distribution=df['sex'].value_counts(normalize=True) * 100
gender_distribution.round(2)

"""What percentage of passengers traveled in each class ?"""

class_distribution=df['pclass'].value_counts(normalize=True)*100
class_distribution.round(2)

"""# 3. Survival Analysis

Survival Rate by Gender

Who had a higher survival rate?
"""

survival_gender=pd.crosstab(df['sex'],df['survived'],normalize='index')*100
survival_gender.round(0)

sns.catplot(data=df, x= 'sex', y='survived',kind='bar', ci=None)
plt.ylabel('Survival Rate (%)')
plt.title('Survival Rate by Gender')
plt.show()

"""Survival Rate by Passenger Class

Which class had the best survival odds?
"""

display(f'survival number by class:', df.groupby('pclass')['survived'].value_counts())
survival_class=pd.crosstab(df['pclass'],df['survived'],normalize='index')*100
display(f'survival percentage by class:',survival_class.round(0))

sns.barplot(data=df, x= 'pclass', y='survived',errorbar=None)
plt.ylabel('Survival Rate (%)')
plt.title('Survival Rate by Passenger Class')
plt.show()

"""Survival Rate by Embarkation Town"""

display(df['embarked'].value_counts())
survival_embarked=pd.crosstab(df['embarked'],df['survived'],normalize='index')*100
display(f'survival percentage by departure town:',survival_embarked.round(0))

sns.catplot(data=df, x= 'embarked', y='survived',kind='bar', errorbar=None)
plt.ylabel('Survival Rate (%)')
plt.title('Survival Rate by Embarkation Town')
plt.show()

"""The percentage of survival lean heavily towards Cherbourg, France (C). Does port of embarkation matter? Lets zoom in a bit about this port"""

df_cherbourg=df[df['embarked']=='C']
df_cherbourg.groupby('sex')['survived'].value_counts()

df_cherbourg['class'].value_counts()

class_distribution_C=df_cherbourg['class'].value_counts(normalize=True)*100
colors = sns.color_palette("husl", len(class_distribution_C))
plt.pie(class_distribution_C, labels=class_distribution_C.index, autopct='%1.1f%%',startangle=90,colors=colors,explode=[0.05] * len(class_distribution_C),shadow=True,textprops={'fontsize': 12, 'weight': 'bold'})

df_cherbourg.groupby('pclass')['survived'].value_counts()

df_cherbourg.groupby('pclass')['survived'].value_counts(normalize=True)*100

"""*Does port of embarkation matter?*

The port of embarkation doesn't appear to matter in itself. The key factor is that Cherbourg passengers had higher survival rates primarily because a larger proportion of them were traveling in first class, which had better survival outcomes across the board. The embarkation port is essentially a proxy for passenger class composition rather than an independent predictor of survival.

# Correlation Analysis of Numerical Variables
"""

# Select only the numerical columns from the DataFrame
numerical_cols = df.select_dtypes(include=['float64', 'int64']).columns

# Compute the pairwise correlation of columns, excluding NA/null values
correlation_matrix = df[numerical_cols].corr()

# Create a figure and a set of subplots
plt.figure(figsize=(10, 8))

# Draw a heatmap with the correlation matrix
# annot=True displays the correlation values on the heatmap
# cmap='coolwarm' sets the color map
# fmt=".2f" formats the annotations to two decimal places
# linewidths=.5 adds lines between cells
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)

# Set the title of the plot
plt.title('Correlation Matrix of Numerical Variables')

# Display the plot
plt.show()

"""**Passenger Class ('pclass')**: There is a notable negative correlation (-0.33) between 'pclass' and 'survived'. This suggests that passengers in lower classes (higher pclass number) were less likely to survive, while those in higher classes were more likely to survive.
**Fare**: There is a positive correlation (0.25) between 'fare' and 'survived'. This indicates that passengers who paid higher fares were more likely to survive. This aligns with the observation about passenger class, as higher fares are typically associated with higher classes.
**Age:** There is a small negative correlation (-0.084) between 'age' and 'survived'. This weak correlation suggests that age itself had a minor impact on survival, with slightly lower survival odds for older passengers.
**SibSp and Parch (Family Size):** The correlations of 'sibsp' and 'parch' with 'survived' are close to zero (-0.038 and 0.069, respectively). The 'family_size' column (which is a combination of 'sibsp' and 'parch') also has a very weak positive correlation (0.014) with 'survived'. This suggests that the number of siblings/spouses or parents/children aboard did not have a strong linear relationship with survival rate on their own. However, the correlation between 'sibsp' and 'parch' is high (0.38), and both are highly correlated with 'family_size' (0.86 and 0.80), which is expected as they are components of family size.
*In summary, passenger class and fare appear to be the most linearly correlated numerical variables with survival, with higher classes/fares associated with increased survival probability.*

# 4. Age, Fare & Family Patterns

To facilitate clearer pattern recognition and more meaningful insights, we will discretize the age variable into categorical brackets. This approach will allow us to identify survival trends across distinct life stages rather than examining individual age values, which can obscure broader demographic patterns
"""

def categorize_age(age):
    if 0 <= age <= 10:
        return 'kids'
    elif 11 <= age <= 21:
        return 'teenagers'
    elif 22 <= age <= 50:
        return 'adults'
    else:
        return 'elder'

df['age_bracket'] = df['age'].apply(categorize_age)

display(df[['age', 'age_bracket']].head())

sns.catplot(data=df, x= 'age_bracket', y='survived',kind='bar', errorbar=None)
plt.ylabel('Survival Rate (%)')
plt.title('Survival Rate by Age Bracket')
plt.show()

plt.figure(figsize=(8,5))
sns.histplot(data=df, x='age', hue='survived', kde=True, bins=30)
plt.title('Age Distribution by Survival')
plt.show()

plt.figure(figsize=(8,5))
sns.boxplot(x='class', y='fare', data=df)
plt.title('Fare Distribution by Passenger Class')
plt.show()

plt.figure(figsize=(8,5))
sns.scatterplot(data=df, x='age', y='fare', hue='survived', alpha=0.7)
plt.title('Age vs Fare by Survival')
plt.show()

def family_group(size):
    if size == 1:
        return 'alone'
    elif 2 <= size <= 4:
        return 'small_family'
    else:
        return 'large_family'

df['family_group'] = df['family_size'].apply(family_group)

family_survival = df.groupby('family_group')['survived'].mean().sort_values(ascending=False)
print(family_survival)

sns.barplot(x='family_group', y='survived', data=df, order=['alone','small_family','large_family'])
plt.title('Survival Rate by Family Size Group')
plt.show()

"""Pair Plot â€” Class, Fare, Age"""

sns.pairplot(df, vars=['age', 'fare'], hue='pclass', plot_kws={'alpha':0.7})
plt.suptitle('Pair Plot: Age vs Fare Colored by Passenger Class', y=1.02)
plt.show()

"""Higher classes (1st) generally paid more and tended to be older, while 3rd class shows lower fares and younger passengers. The color separation highlights class structure within the dataset.

Pair Plot 2- Key Numerical Features
"""

sns.pairplot(df, vars=['age', 'fare', 'family_size'], hue='survived', plot_kws={'alpha':0.7})
plt.suptitle('Pair Plot of Key Numerical Variables by Survival', y=1.02)
plt.show()

"""The pair plot shows positive relationships between family size and fare. Survivors cluster at higher fares and lower family size

## 5. Statistical Testing
"""

from scipy.stats import chi2_contingency, ttest_ind

"""Chi-Square Test â€” Gender vs Survival"""

contingency = pd.crosstab(df['sex'], df['survived'])  # Interpretation: p < 0.05 â†’ gender significantly affects survival (and it will be << 0.001).
chi2, p, dof, expected = chi2_contingency(contingency)
print(f"Chi2={chi2:.2f}, p={p:.5f}")

"""Chi-Square Test â€” Class vs Survival"""

contingency = pd.crosstab(df['pclass'], df['survived']) #Interpretation: significant (p = 0.000) â†’ class strongly related to survival.
chi2, p, dof, expected = chi2_contingency(contingency)
print(f"Chi2={chi2:.2f}, p={p:.5f}")

"""Fare Between Survivors and Non-Survivors"""

survived_fare = df[df['survived'] == 1]['fare'].dropna()  #Interpretation: p < 0.05 â†’ average fare differs significantly (bigger for survivors).
not_survived_fare = df[df['survived'] == 0]['fare'].dropna()

t_stat, p_val = ttest_ind(survived_fare, not_survived_fare, equal_var=False)
print(f"T-statistic={t_stat:.2f}, p-value={p_val:.5f}")

